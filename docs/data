// Global Variables
/sep globals
/spf _g.
ver: number

toolbar: PluginToolbar

http: HttpService
chs: ChangeHistoryService
insert: InsertService
asset: AssetService
input_serv: UserInputService
run_serv: RunService
studioServ: StudioService

BLANK_FUNC() -> void

plugin: Plugin

Mouse: PluginMouse
MouseFilter: Folder
ReleaseHandlesCon: RBXScriptConnection?

new_ui: Folder
rigs: Folder
anis: Folder

window_folder: Folder
ui3d: Folder

DOUBLE_CLICC_TIME: number

DEFAULT_FPS: number
current_fps: number

MIN_FRAMES: number
DEFAULT_FRAMES: number
MAX_FRAMES: number

bone_handle_size: number
show_bone_cones: boolean
show_bone_spheres: boolean
show_part_handles: boolean
no_hide_handles: boolean
full_part_handles: boolean
scale_handles: boolean

set_kf_color(value: boolean) -> void

time_offset: number

AllMenuItems: { MenuItem }

NIL_VALUE: userdata

/spf 
insert more global variables here

/sep classes
/
//////////////////////////
/
// Object
/object Object
/expl Constructor
- Object:new(create: any) -> Object

/spf - Object.
/expl Properties
ThemedItems: { Instance }
ParentObjectGroups: { [string]: ObjectGroup }

/spf - Object:
/expl Methods
Destroy() -> void
AddPaintedItem(item: Instance, paintData: { property: any }) -> void
RemovePaintedItem(item: Instance) -> void
SetItemPaint(item: Instance, paintData: { property: any }, tweenTime: number) -> void
/
/p
/
//////////////////////////
/

/spf 
// Ease
/object Ease
/inher Object

/expl Constructor
- Ease:new(ease_type: string, params: { any }) -> Ease

/spf - Ease.
/expl Properties
ease_type: string
params: { any }
_func: (number) -> (number)
_poolcount: number

/spf - Ease:
/expl Methods
Tableize() -> table(ease_tbl)
Serialize() -> Instance(ease_folder)
Equals(other_ease: Ease) -> boolean

/spf - Ease.
/expl Others
LINEAR() -> Ease:new("Linear")
LINEAR_tbl() -> Ease:new("Linear"):Tableize()
CONSTANT() -> Ease:new("Constant")
DIR_PARAMS = { ["Direction"] = true }
PARAM_DATA: { [string]: { name: string, input_type: number, default: number, inc: number, frame_relative: boolean? } }
EASE_DATA: { [string]: { Color: Color3, Params: { [string]: boolean }? } }
EASE_LIST: { { string (name), string (displayName) } }
DIR_LIST: typeof(Ease.EASE_LIST)
Detableize(ease_tbl: table(ease_tbl)) -> Ease
Deserialize(ease_folder: Instance(ease_folder)) -> Ease
/
/p
/
//////////////////////////
/

/spf 
// GuiElement
/object GuiElement
/inher Object

/expl Constructor
- GuiElement:new(UI: Instance) -> GuiElement

/expl Properties
- GuiElement.UI: Instance
/
/p
/
//////////////////////////
/

/spf 
// Button
/object Button
/inher GuiElement

/expl Constructor
- Button:new(UI: Instance) -> Button

/spf - Button.
/expl Properties
OnClick: () -> void
highlight: boolean

/spf - Button:
/expl Methods
set_highlight(value: boolean) -> void
SetActive(value: boolean) -> void
/
//////////////////////////
/

/spf 
// CFrameInput
/object CFrameInput
/inher GuiElement

/expl Constructor
- CFrameInput:new(UI: Instance, default: CFrame, changed: (value: CFrame, relative: boolean) -> ()) -> CFrame

/spf - CFrameInput.
/Properties
_changed: (value: CFrame, relative: boolean) -> void
Value: CFrame
Enabled: boolean

X: NumberInput
Y: NumberInput
Z: NumberInput
AngleX: AngleInput
AngleY: AngleInput
AngleZ: AngleInput

CopyAngle: Button
CopyPos: Button
CopyBoth: Button

/spf - CFrameInput:
/expl Methods
SetEnabled(value: boolean) -> void
value_changed(ele: any) -> void
Process(input: CFrame?) -> void
Set(input: CFrame?, inputted: boolean, relative: boolean)
/
//////////////////////////
/

/spf 
// ObjectGroup
/object ObjectGroup
/inher Object

/expl Constructor
- ObjectGroup:new(name: string) -> ObjectGroup

/spf - ObjectGroup.
/expl Properties
name: string
Objects: { Object }
GroupLookup: { [string]: ObjectGroup }
size: number
dict: { [string]: Object }
inds: { [string]: number }

/spf - ObjectGroup:
/expl Methods
Move(Object: Object, index: number) -> void
Add(Object: Object) -> void
Insert(Object: Object, index: number) -> void
Remove(Object: Object) -> void
RemoveAt(index: number) -> void
Clear() -> void
IndexOf(Object: Object) -> void
Iterate(func: (object: Object, objectGroup: ObjectGroup) -> boolean?, object_filter: string?) -> void
Contains(Object: Object) -> boolean
/
/p
/
//////////////////////////
/

/spf 
// Path
/object Path
/inher Object

/expl Constructor
- Path:new(Item: Instance) -> Path

/spf - Path.
/expl Properties
Item: Instance
Format: string
ItemType: string
InstanceNames: { string }
InstanceTypes: { string }

/spf - Path:
/expl Methods
Serialize() -> {ItemType: string, InstanceNames: {string}, InstanceTypes: {string}
GetItem() -> Instance

/spf - Path.
/expl Others
Deserialize(tbl: {ItemType: string, InstanceNames: {string}, InstanceTypes: {string}}) -> Path?
GetPath(Item: Instance) -> string, string, {string}, {string}
ParsePath(ItemType: string, InstanceNames: {string}, InstanceTypes: {string}) -> Instance
CheckIfUnique(Item: Instance) -> boolean
/
/p
