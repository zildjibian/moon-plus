/sep globals
/spf _g.
ver: number

toolbar: PluginToolbar

http: HttpService
chs: ChangeHistoryService
insert: InsertService
asset: AssetService
input_serv: UserInputService
run_serv: RunService
studioServ: StudioService

BLANK_FUNC() -> void

plugin: Plugin

Mouse: PluginMouse
MouseFilter: Folder
ReleaseHandlesCon: RBXScriptConnection?

new_ui: Folder
rigs: Folder
anis: Folder

window_folder: Folder
ui3d: Folder

DOUBLE_CLICC_TIME: number

DEFAULT_FPS: number
current_fps: number

MIN_FRAMES: number
DEFAULT_FRAMES: number
MAX_FRAMES: number

bone_handle_size: number
show_bone_cones: boolean
show_bone_spheres: boolean
show_part_handles: boolean
no_hide_handles: boolean
full_part_handles: boolean
scale_handles: boolean

set_kf_color(value: boolean) -> void

time_offset: number

AllMenuItems: { MenuItem }

NIL_VALUE: userdata
/spf 
insert more global variables here

/sep classes
// Object
/object Object
/spf - Object.
/expl Constructor
new(create: any) -> Object

/spf - Object.
/expl Properties
ThemedItems: { Instance }
ParentObjectGroups: { [string]: ObjectGroup }

/spf - Object:
/expl Methods
Destroy() -> void
AddPaintedItem(item: Instance, paintData: { property: any }) -> void
RemovePaintedItem(item: Instance) -> void
SetItemPaint(item: Instance, paintData: { property: any }, tweenTime: number) -> void

/p
/p

// Ease
/object Ease
/inher Object

/spf - Ease.
/expl Constructor
new(ease_type: string, params: { any }) -> Ease

/spf - Ease.
/expl Properties
ease_type: string
params: { any }
_func: (number) -> (number)
_poolcount: number

/spf - Ease:
/expl Methods
Tableize() -> table(ease_tbl)
Serialize() -> Instance(ease_folder)
Equals(other_ease: Ease) -> boolean

/spf - Ease.
/expl Others
LINEAR() -> Ease:new("Linear")
LINEAR_tbl() -> Ease:new("Linear"):Tableize()
CONSTANT() -> Ease:new("Constant")
DIR_PARAMS = { ["Direction"] = true }
PARAM_DATA: { [string]: { name: string, input_type: number, default: number, inc: number, frame_relative: boolean? } }
EASE_DATA: { [string]: { Color: Color3, Params: { [string]: boolean }? } }
EASE_LIST: { { string (name), string (displayName) } }
DIR_LIST: typeof(Ease.EASE_LIST)
Detableize(ease_tbl: table(ease_tbl)) -> Ease
Deserialize(ease_folder: Instance(ease_folder)) -> Ease

/p
/p

// GuiElement
/object GuiElement
/inher Object

/spf - GuiElement.
/expl Constructor
new(UI: Instance) -> GuiElement

/spf - GuiElement.
/expl Properties
UI: Instance

/p
/p

// Button
/object Button
/inher GuiElement

/spf - Button.
/expl Constructor
new(UI: Instance) -> Button

/spf - Button.
/expl Properties
OnClick: () -> void
highlight: boolean

/spf - Button:
/expl Methods
set_highlight(value: boolean) -> void
SetActive(value: boolean) -> void

/p
/p

// CFrameInput
/object CFrameInput
/inher GuiElement

/spf - CFrameInput.
/expl Constructor
new(UI: Instance, default: CFrame, changed: (value: CFrame, relative: boolean) -> void) -> CFrameInput

/spf - CFrameInput.
/expl Properties
_changed: (value: CFrame, relative: boolean) -> void
Value: CFrame
Enabled: boolean

X: NumberInput
Y: NumberInput
Z: NumberInput
AngleX: AngleInput
AngleY: AngleInput
AngleZ: AngleInput

CopyAngle: Button
CopyPos: Button
CopyBoth: Button

/spf - CFrameInput:
/expl Methods
SetEnabled(value: boolean) -> void
value_changed(ele: any) -> void
Process(input: CFrame?) -> void
Set(input: CFrame?, inputted: boolean, relative: boolean)

/p
/p

// Menu
/object Menu
/inher Object

/spf - Menu.
/expl Constructor
new(name: string) -> Menu

/spf - Menu.
/expl Properties
_MenuItems: ObjectGroup
_curOrder: number
name: string
UI: Instance
ActiveMenuItem: MenuItem

/spf - Menu:
/expl Methods
_MenuItemClick(MenuItem: MenuItem) -> void
_AddMenuItem(MenuItem: MenuItem) -> void
AddDivider() -> void
size(parent: Instance) -> void
Show(vec2pos: Vector2, parent: Instance) -> void
Close() -> void

/p
/p

// MenuBar
/object MenuBar
/inher Object

/spf - MenuBar.
/expl Constructor
new(UI: Instance) -> MenuBar
MenuBarFactory(name, data) -> MenuBar

/spf - MenuBar.
/expl Properties
_MenuBarButtons: ObjectGroup
_curOrder: number
name: string
Window: Window
UI: Instance
ActiveMenuBarButton: MenuBarButton
Enabled: boolean

/spf - MenuBar:
/expl Methods
_MenuBarButtonClick(MenuBarButton: MenuBarButton) -> void
_AddButton(MenuBarButton: MenuBarButton) -> void
_Open(MenuBarButton: MenuBarButton) -> void
Close() -> void
SetEnabled(value: boolean, noTween: boolean?) -> void

/p
/p

// MenuBarButton
/object MenuBarButton
/inher Object

/spf - MenuBarButton.
/expl Constructor
new(name: string, MenuBar: MenuBar, ButtonLabel: string) -> MenuBarButton

/spf - MenuBarButton.
/expl Properties
name: string
MenuBar: MenuBar
UI: Instance
main_color: string

/spf - MenuBarButton:
/expl Methods
_HoverBegan(UI: any) -> void
_HoverEnded(UI: any) -> void

/p
/p

// MenuItem
/object MenuItem
/inher Object

/spf - MenuItem.
/expl Constructor
new(name: string, Menu: Menu, ItemLabel: string, extra: { NoClickOff: boolean?, IsToggle: boolean?, Price: boolean? }?) -> MenuItem

/spf - MenuItem.
/expl Properties
name: string
Menu: Menu
left_ui: Instance
middle_ui: Instance
right_ui: Instance
Disabled: boolean
NoClickOff: boolean

/spf - MenuItem:
/expl Methods
set_check(value: boolean) -> void
_HoverBegan(UI: any) -> void
_HoverEnded(UI: any) -> void
_SetPrice(price: number) -> void
_SetControl(keys: { string? }) -> void
_AddMoreFrame() -> void
_SetDisabled(value: boolean) -> void

/p
/p

// ObjectGroup
/object ObjectGroup
/inher Object

/spf - ObjectGroup.
/expl Constructor
new(name: string) -> ObjectGroup

/spf - ObjectGroup.
/expl Properties
name: string
Objects: { Object }
GroupLookup: { [string]: ObjectGroup }
size: number
dict: { [string]: Object }
inds: { [string]: number }

/spf - ObjectGroup:
/expl Methods
Move(Object: Object, index: number) -> void
Add(Object: Object) -> void
Insert(Object: Object, index: number) -> void
Remove(Object: Object) -> void
RemoveAt(index: number) -> void
Clear() -> void
IndexOf(Object: Object) -> void
Iterate(func: (object: Object, objectGroup: ObjectGroup) -> boolean?, object_filter: string?) -> void
Contains(Object: Object) -> boolean

/p
/p

// Path
/object Path
/inher Object

/spf - Path.
/expl Constructor
new(Item: Instance) -> Path

/spf - Path.
/expl Properties
Item: Instance
Format: string
ItemType: string
InstanceNames: { string }
InstanceTypes: { string }

/spf - Path:
/expl Methods
Serialize() -> {ItemType: string, InstanceNames: {string}, InstanceTypes: {string}
GetItem() -> Instance

/spf - Path.
/expl Others
Deserialize(tbl: {ItemType: string, InstanceNames: {string}, InstanceTypes: {string}}) -> Path?
GetPath(Item: Instance) -> string, string, {string}, {string}
ParsePath(ItemType: string, InstanceNames: {string}, InstanceTypes: {string}) -> Instance
CheckIfUnique(Item: Instance) -> boolean

/p
/p

// TrackItem
/object TrackItem
/inher Object

/spf - TrackItem.
/expl Constructor
newnew(UI: Instance, width: number, frm_pos: number) -> TrackItem

/spf - TrackItem.
/expl Properties
UI: Instance
ParentTrack: Track
width: number
frm_pos: number
selected: boolean

LayerSystem: LayerSystem
SelectionHandler: SelectionHandler
SelectedTrackItems: ObjectGroup

_reg: boolean

/spf - TrackItem:
/expl Methods
_SetSelect(value: boolean) -> void
_Position(frm_pos: number) -> void
_Size(width: number) -> void

/p
/p

// Keyframe
/object Keyframe
/inher TrackItem

/spf - Keyframe.
/expl Constructor
new(frm_pos: number, Values: {any}, Eases: { Ease }) -> Keyframe
Detableize(kf_tbl: {_tblType: "Keyframe", frm_pos: number, EaseMap: { typeof(Ease:Tableize()) }, TargetValues: { any } width: number}) -> Keyframe
Deserialize(kf_folder: Instance) -> Keyframe

/spf - Keyframe.
/expl Properties
TargetValues: { any }
value_count: number

width: boolean
group: boolean

EaseMap: { Ease }
is_linear: boolean
is_constant: boolean
ease_colored: boolean

/spf - Keyframe:
/expl Methods
Tableize() -> {_tblType: "Keyframe", frm_pos: number, EaseMap: { typeof(Ease:Tableize()) }, TargetValues: { any } width: number}
Serialize() -> Instance

IterateTargetValues(func: (pos: number, value: any, ease: Ease, actPos: number) -> void) -> void
GetTargetValue() -> any
SetTargetValue(TargetValue) -> void

GetEase() -> Ease
SetEase(Ease) -> void

_UpdateAppearance(ease_colored: boolean?) -> void

/p
/p

// Marker
/object Marker
/inher TrackItem

/p
/p
